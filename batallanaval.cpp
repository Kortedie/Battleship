#include <iostream>
#include <windows.h>
#include <conio.h>

using namespace std;

void gotoxy(int x, int y){
HANDLE hcon = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD dwPos;
    dwPos.X = x;
    dwPos.Y = y;
    SetConsoleCursorPosition(hcon, dwPos);
}

char ma[34][33] =   {
                        {' ',' ',' ','A',' ','B',' ','C',' ','D',' ','E',' ','F',' ','G',' ','H',' ','I',' ','J',' ','K',' ','L',' ','M',' ','N',' ','O',' '},
                        {' ',' ',' ','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
                        {' ','0','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','1','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','2','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','3','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','4','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','5','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','6','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','7','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','8','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {' ','9','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','0','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','1','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','2','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','3','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','4','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|','-','|'},
                        {'1','5','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|',' ','|'},
                        {' ',' ','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'},
                    };

struct coord{
    int x, y;
};

struct pieza{
    coord original;
    coord periferico[4];
    char C;
    coord posicion(int n);
};

coord pieza::posicion(int n){
    coord retorno = {original.x, original.y};
    if(n != 0){
        retorno.x += periferico[n-1].x;
        retorno.y += periferico[n-1].y;
    };
    return retorno;
}

coord peris[8][4] = {{{2,0},{4,0},{6,0},{8,0}},
                     {{2,0},{4,0},{6,0},{   }},
                     {{2,0},{4,0},{6,0},{   }},
                     {{2,0},{4,0},{   },{   }},
                     {{2,0},{4,0},{   },{   }},
                     {{   },{   },{   },{   }},
                     {{   },{   },{   },{   }},
                     {{   },{   },{   },{   }}
};

char barcos[8] = {'P','B','S', 'L'};

class enemigo{
private :
    public:
        void pintarmapa();
        void mover(int &, int &);
        void pintar(int, int);
        void borrar(int, int);
};

void enemigo::pintarmapa(){
    for(int i=0;i<34;i++){
        cout<<endl;
        for(int j=0;j<33;j++){
            cout<<ma[i][j];
        }
    }
}

void enemigo::mover(int &x, int &y){
    if(kbhit()){
        enemigo::borrar(x,y);
        char tecla = getch();
        if(tecla == 'a' && x>3)
            x-=2;
        if(tecla == 'd' && x<32)
            x+=2;
        if(tecla == 's' && y<34)
            y+=2;
        if(tecla == 'w' && y>3)
            y-=2;
        enemigo::pintar(x,y);
    }
}

void enemigo::pintar(int x, int y){
    gotoxy(x,y);
    cout<<"O";
}

void enemigo::borrar(int x,int y){
    gotoxy(x,y);
    cout<<" ";
}

class jugador{
    public:
        void pintar(pieza &);
        void borrar(pieza &);
        void rotar(pieza &);
        coord rotar(coord &);
        void seleccionar(pieza &, int);
        void mover(pieza &);
        bool colision(pieza &);
};

void jugador::pintar(pieza &P){
    for(int i=0; i<5; i++){
        coord c = P.posicion(i);
        ma[c.y][c.x] = P.C;
    };
}

void jugador::borrar(pieza &P){
    for(int i=0; i<5; i++){
        coord c = P.posicion(i);
        ma[c.y][c.x] = ' ';
    };
}

coord jugador::rotar(coord &c)
{
    coord ret = {c.y,c.x};
    return ret;
}

void jugador::rotar(pieza &P){
    for(int i=0; i<4; i++){
        P.periferico[i] = jugador::rotar(P.periferico[i]);
    };
}

void jugador::seleccionar(pieza &P, int r){
    P.original.x = 3;
    P.original.y = 2;
    P.C = barcos[r];
    for(int i=0; i<4; i++){
        P.periferico[i] = peris[r][i];
    };
}

void jugador::mover(pieza &P){
    if(kbhit()){
        pieza copia = P;
        char tecla = getch();
        if(tecla == 'a')
            P.original.x -= 2;
        if(tecla == 'd')
            P.original.x += 2;
        if(tecla == 's')
            P.original.y += 2;
        if(tecla == 'w')
            P.original.y -= 2;
        if(tecla == 'c'){
            jugador::rotar(P);
        }
        if(jugador::colision(P)){
            P = copia;
        };
        jugador::borrar(copia);
        jugador::pintar(P);
    }
}

bool jugador::colision(pieza &P){
    for(int i=0; i<5; i++){
        coord c = P.posicion(i);
        if(c.x < 2 || c.x > 32)
            return true;
        if(c.y < 2 || c.y > 33)
            return true;
    };
    return false;
}

int main(){
    enemigo a;
    jugador b;
    pieza S;
    int r = 0;

    b.seleccionar(S,r);
    while(true){
        gotoxy(0, 25);
        a.pintarmapa();
        b.mover(S);
    }

    return 0;
}